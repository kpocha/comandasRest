<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
#>

<#
}
#>
 <style>
        #titulo {text-transform: uppercase;}
		.margin{margin-top:10px;}
		.panel-title-principal{background-color:#ebebeb;}
    </style>
<div class="containe">
    <div class="row">
        <div class="col-xs-12">
            <h4>Home &raquo; <#= ViewDataTypeShortName #> &raquo; Nuevo</h4>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-12">
            <div class="panel panel-default panel-title-principal">
                <div class="panel-body">
					<div class="row">
                        <div class="col-md-6 col-xs-6 pull-left margin">
							<h2 id="titulo" class="pull-left ">NUEVO <#= ViewDataTypeShortName #></h2>
                        </div>
                        <div class="col-md-6 col-xs-6 pull-right">
							<a href="@Url.Action("Index", "<#= ViewDataTypeShortName #>")" class="btn btn-info pull-right margin" style="display:inline-block;">
								<span class="icon icon-action-undo"></span>
								Volver
							</a>
                        </div>
                    </div>                    
                </div>
            </div>
        </div>
    </div>


<#
var model = 0;
string pkName = GetPrimaryKeyName();
foreach (PropertyMetadata property in ModelMetadata.Properties) {
	 if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {
    	model++;
	}
}
#>
@using (Html.BeginForm()) 
	{
		@Html.AntiForgeryToken()

		<div class="form-horizontal">
	<# 
		if (isControlHtmlAttributesSupported) {
	#>
			@Html.ValidationSummary(true, "", new { @class = "text-danger" })
	<#        
		} else {
	#>
			@Html.ValidationSummary(true)
	<#      
		}
	if(model < 7){
	#>
		<div class="col-md-6 col-md-offset-3 col-sm-offset-3">
			
			<#
			foreach (PropertyMetadata property in ModelMetadata.Properties) {
				if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

					// If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
					if (property.IsPrimaryKey && IsPropertyGuid(property)) {
						continue;
					}

			#>
				<div class="form-group">
			<#
					if(property.PropertyName == "habilitado" || property.PropertyName == "Habilitado"){
			#>           
					@Html.HiddenFor(model => model.<#= property.PropertyName #>)
			<#
					}else if (property.IsForeignKey) {
			#>
						@Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label col-md-4 col-sm-3" })
			<#
					} else {
			#>
						@Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-4 col-sm-3" })
			<#
					}
			#>
						<div class="col-md-8 col-sm-9">
			<#
					bool isCheckbox = property.TypeName.Equals(boolType);
					if (property.IsForeignKey) {
			#>
			<# 
						if (isControlHtmlAttributesSupported) {
			#>
							@Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
			<#
						} else {
			#>
							@Html.DropDownList("<#= property.PropertyName #>", String.Empty)
			<#
						}
			#>
			<#
					} else  if (isControlHtmlAttributesSupported) {
						if (isCheckbox) {
			#>
							<div class="checkbox">
			<#
							PushIndent("    ");
			#>
							@Html.EditorFor(model => model.<#= property.PropertyName #>)
			<#
						} else if (property.IsEnum && !property.IsEnumFlags) {
			#>
							@Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
			<#
						} else {
			#>
							@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
			<#
						} 
					} else {
			#>
							@Html.EditorFor(model => model.<#= property.PropertyName #>)
			<#
					}
			#>
			<# 
					if (isControlHtmlAttributesSupported) {
			#>
							@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
			<#        
					} else {
			#>
							@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
			<#      
					}
			#>
			<#
					if (isCheckbox && isControlHtmlAttributesSupported) {
						PopIndent();
			#>
							</div>
			<#
					}
			#>
						</div>
					</div>

			<#
				}
			}
			#>
				<div class="form-group">
					<div class="col-md-offset-4 col-md-4 col-sm-offset-3 col-sm-6 text-left">
						<input type="submit" value="Guardar" class="btn btn-info" />
					</div>
				</div>
			</div>
		</div>
	<#
	}else{
		var count = 0;
	#>
		<div class="col-md-6">
			<#
	
			foreach (PropertyMetadata property in ModelMetadata.Properties) {
				if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {
					count++;

					// If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
					if (property.IsPrimaryKey && IsPropertyGuid(property)) {
						continue;
					}
					if(count%2 != 0){
			#>
			<div class="form-group">
			<#
					if(property.PropertyName == "habilitado" || property.PropertyName == "Habilitado"){
			#>           
					@Html.HiddenFor(model => model.<#= property.PropertyName #>)
			<#
					}else if (property.IsForeignKey) {
			#>
					@Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label col-md-4 col-sm-3" })
		<#
				} else {
		#>
					@Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-4 col-sm-3" })
		<#
				}
		#>
					<div class="col-md-8 col-sm-9">
		<#
				bool isCheckbox = property.TypeName.Equals(boolType);
				if (property.IsForeignKey) {
		#>
		<# 
					if (isControlHtmlAttributesSupported) {
		#>
						@Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
		<#
					} else {
		#>
						@Html.DropDownList("<#= property.PropertyName #>", String.Empty)
		<#
					}
		#>
		<#
				} else  if (isControlHtmlAttributesSupported) {
					if (isCheckbox) {
		#>
						<div class="checkbox">
		<#
						PushIndent("    ");
		#>
						@Html.EditorFor(model => model.<#= property.PropertyName #>)
		<#
					} else if (property.IsEnum && !property.IsEnumFlags) {
		#>
						@Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
		<#
					} else {
		#>
						@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
		<#
					} 
				} else {
		#>
						@Html.EditorFor(model => model.<#= property.PropertyName #>)
		<#
				}
		#>
		<# 
				if (isControlHtmlAttributesSupported) {
		#>
						@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
		<#        
				} else {
		#>
						@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
		<#      
				}
		#>
		<#
				if (isCheckbox && isControlHtmlAttributesSupported) {
					PopIndent();
		#>
						</div>
		<#
				}
		#>
					</div>
				</div>

		<#
			}
		}
	}
		#>
			</div>
		<div class="col-md-6">
		<#
		count = 0;
	
			foreach (PropertyMetadata property in ModelMetadata.Properties) {
				if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {
					count++;

					// If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
					if (property.IsPrimaryKey && IsPropertyGuid(property)) {
						continue;
					}
					if(count%2 == 0){
			#>
			<div class="form-group">
			<#
					if(property.PropertyName == "habilitado" || property.PropertyName == "Habilitado"){
			#>           
					@Html.HiddenFor(model => model.<#= property.PropertyName #>)
			<#
					}else if (property.IsForeignKey) {
			#>
					@Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label col-md-4 col-sm-3" })
		<#
				} else {
		#>
					@Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-4 col-sm-3" })
		<#
				}
		#>
					<div class="col-md-8 col-sm-9">
		<#
				bool isCheckbox = property.TypeName.Equals(boolType);
				if (property.IsForeignKey) {
		#>
		<# 
					if (isControlHtmlAttributesSupported) {
		#>
						@Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
		<#
					} else {
		#>
						@Html.DropDownList("<#= property.PropertyName #>", String.Empty)
		<#
					}
		#>
		<#
				} else  if (isControlHtmlAttributesSupported) {
					if (isCheckbox) {
		#>
						<div class="checkbox">
		<#
						PushIndent("    ");
		#>
						@Html.EditorFor(model => model.<#= property.PropertyName #>)
		<#
					} else if (property.IsEnum && !property.IsEnumFlags) {
		#>
						@Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
		<#
					} else {
		#>
						@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
		<#
					} 
				} else {
		#>
						@Html.EditorFor(model => model.<#= property.PropertyName #>)
		<#
				}
		#>
		<# 
				if (isControlHtmlAttributesSupported) {
		#>
						@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
		<#        
				} else {
		#>
						@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
		<#      
				}
		#>
		<#
				if (isCheckbox && isControlHtmlAttributesSupported) {
					PopIndent();
		#>
						</div>
		<#
				}
		#>
					</div>
				</div>

		<#
			}
		}
	}
		#>
		</div>
		<div class="form-group">
			<div class="col-md-offset-4 col-md-4 col-sm-offset-3 col-sm-6 text-left">
				<input type="submit" value="Guardar" class="btn btn-info" />
			</div>
		</div>
	</div>
	<#
	}
	#>
}
</div>
<#
if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
#>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<#
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>